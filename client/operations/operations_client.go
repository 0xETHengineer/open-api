package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSitesSiteID delete sites site ID API
*/
func (a *Client) DeleteSitesSiteID(params *DeleteSitesSiteIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesSiteIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesSiteIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSitesSiteID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSitesSiteIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesSiteIDOK), nil
}

/*
DeleteSitesSiteIDSnippetsSnippetID delete sites site ID snippets snippet ID API
*/
func (a *Client) DeleteSitesSiteIDSnippetsSnippetID(params *DeleteSitesSiteIDSnippetsSnippetIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSitesSiteIDSnippetsSnippetIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSitesSiteIDSnippetsSnippetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSitesSiteIDSnippetsSnippetID",
		Method:             "DELETE",
		PathPattern:        "/sites/{site_id}/snippets/{snippet_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSitesSiteIDSnippetsSnippetIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSitesSiteIDSnippetsSnippetIDNoContent), nil
}

/*
GetFormsFormIDSubmissions get forms form ID submissions API
*/
func (a *Client) GetFormsFormIDSubmissions(params *GetFormsFormIDSubmissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFormsFormIDSubmissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFormsFormIDSubmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFormsFormIDSubmissions",
		Method:             "GET",
		PathPattern:        "/forms/{form_id}/submissions",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFormsFormIDSubmissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFormsFormIDSubmissionsOK), nil
}

/*
GetHooks get hooks API
*/
func (a *Client) GetHooks(params *GetHooksParams, authInfo runtime.ClientAuthInfoWriter) (*GetHooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHooks",
		Method:             "GET",
		PathPattern:        "/hooks",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHooksReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHooksOK), nil
}

/*
GetHooksTypes get hooks types API
*/
func (a *Client) GetHooksTypes(params *GetHooksTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetHooksTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHooksTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHooksTypes",
		Method:             "GET",
		PathPattern:        "/hooks/types",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHooksTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHooksTypesOK), nil
}

/*
GetSites get sites API
*/
func (a *Client) GetSites(params *GetSitesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSites",
		Method:             "GET",
		PathPattern:        "/sites",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesOK), nil
}

/*
GetSitesSiteIDDeploys get sites site ID deploys API
*/
func (a *Client) GetSitesSiteIDDeploys(params *GetSitesSiteIDDeploysParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDDeploysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDDeploysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDDeploys",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/deploys",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDDeploysReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDDeploysOK), nil
}

/*
GetSitesSiteIDDeploysDeployID get sites site ID deploys deploy ID API
*/
func (a *Client) GetSitesSiteIDDeploysDeployID(params *GetSitesSiteIDDeploysDeployIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDDeploysDeployIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDDeploysDeployIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDDeploysDeployID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/deploys/{deploy_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDDeploysDeployIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDDeploysDeployIDOK), nil
}

/*
GetSitesSiteIDFiles get sites site ID files API
*/
func (a *Client) GetSitesSiteIDFiles(params *GetSitesSiteIDFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDFiles",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/files",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDFilesOK), nil
}

/*
GetSitesSiteIDFilesFilePath get sites site ID files file path API
*/
func (a *Client) GetSitesSiteIDFilesFilePath(params *GetSitesSiteIDFilesFilePathParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDFilesFilePathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDFilesFilePathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDFilesFilePath",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/files/{file_path}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDFilesFilePathReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDFilesFilePathOK), nil
}

/*
GetSitesSiteIDForms get sites site ID forms API
*/
func (a *Client) GetSitesSiteIDForms(params *GetSitesSiteIDFormsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDFormsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDFormsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDForms",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/forms",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDFormsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDFormsOK), nil
}

/*
GetSitesSiteIDMetadata get sites site ID metadata API
*/
func (a *Client) GetSitesSiteIDMetadata(params *GetSitesSiteIDMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDMetadata",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/metadata",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDMetadataOK), nil
}

/*
GetSitesSiteIDSnippets get sites site ID snippets API
*/
func (a *Client) GetSitesSiteIDSnippets(params *GetSitesSiteIDSnippetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDSnippetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDSnippetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDSnippets",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/snippets",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDSnippetsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDSnippetsOK), nil
}

/*
GetSitesSiteIDSnippetsSnippetID get sites site ID snippets snippet ID API
*/
func (a *Client) GetSitesSiteIDSnippetsSnippetID(params *GetSitesSiteIDSnippetsSnippetIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDSnippetsSnippetIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDSnippetsSnippetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDSnippetsSnippetID",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/snippets/{snippet_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDSnippetsSnippetIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDSnippetsSnippetIDOK), nil
}

/*
GetSitesSiteIDSubmissions get sites site ID submissions API
*/
func (a *Client) GetSitesSiteIDSubmissions(params *GetSitesSiteIDSubmissionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSitesSiteIDSubmissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSitesSiteIDSubmissionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSitesSiteIDSubmissions",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}/submissions",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSitesSiteIDSubmissionsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSitesSiteIDSubmissionsOK), nil
}

/*
PostSites post sites API
*/
func (a *Client) PostSites(params *PostSitesParams, authInfo runtime.ClientAuthInfoWriter) (*PostSitesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSites",
		Method:             "POST",
		PathPattern:        "/sites",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSitesReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSitesCreated), nil
}

/*
PostSitesSiteIDSnippets post sites site ID snippets API
*/
func (a *Client) PostSitesSiteIDSnippets(params *PostSitesSiteIDSnippetsParams, authInfo runtime.ClientAuthInfoWriter) (*PostSitesSiteIDSnippetsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSitesSiteIDSnippetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSitesSiteIDSnippets",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/snippets",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSitesSiteIDSnippetsReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSitesSiteIDSnippetsCreated), nil
}

/*
PutSitesSiteIDMetadata put sites site ID metadata API
*/
func (a *Client) PutSitesSiteIDMetadata(params *PutSitesSiteIDMetadataParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesSiteIDMetadataNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesSiteIDMetadataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSitesSiteIDMetadata",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/metadata",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSitesSiteIDMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesSiteIDMetadataNoContent), nil
}

/*
PutSitesSiteIDSnippetsSnippetID put sites site ID snippets snippet ID API
*/
func (a *Client) PutSitesSiteIDSnippetsSnippetID(params *PutSitesSiteIDSnippetsSnippetIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSitesSiteIDSnippetsSnippetIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSitesSiteIDSnippetsSnippetIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSitesSiteIDSnippetsSnippetID",
		Method:             "PUT",
		PathPattern:        "/sites/{site_id}/snippets/{snippet_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSitesSiteIDSnippetsSnippetIDReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSitesSiteIDSnippetsSnippetIDNoContent), nil
}

/*
Create create API
*/
func (a *Client) Create(params *CreateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create",
		Method:             "POST",
		PathPattern:        "/hooks",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCreated), nil
}

/*
Destroy destroy API
*/
func (a *Client) Destroy(params *DestroyParams, authInfo runtime.ClientAuthInfoWriter) (*DestroyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDestroyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "destroy",
		Method:             "DELETE",
		PathPattern:        "/hooks/{hook_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DestroyReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DestroyNoContent), nil
}

/*
List list API
*/
func (a *Client) List(params *ListParams, authInfo runtime.ClientAuthInfoWriter) (*ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list",
		Method:             "GET",
		PathPattern:        "/forms",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOK), nil
}

/*
Provision provision API
*/
func (a *Client) Provision(params *ProvisionParams, authInfo runtime.ClientAuthInfoWriter) (*ProvisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provision",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/ssl",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ProvisionReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisionOK), nil
}

/*
Restore restore API
*/
func (a *Client) Restore(params *RestoreParams, authInfo runtime.ClientAuthInfoWriter) (*RestoreCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restore",
		Method:             "POST",
		PathPattern:        "/sites/{site_id}/deploys/{deploy_id}/restore",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RestoreCreated), nil
}

/*
Show show API
*/
func (a *Client) Show(params *ShowParams, authInfo runtime.ClientAuthInfoWriter) (*ShowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "show",
		Method:             "GET",
		PathPattern:        "/sites/{site_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowOK), nil
}

/*
Update update API
*/
func (a *Client) Update(params *UpdateParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "update",
		Method:             "PATCH",
		PathPattern:        "/sites/{site_id}",
		ProducesMediaTypes: []string{"application/io.swagger.netlify.v1+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNoContent), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
