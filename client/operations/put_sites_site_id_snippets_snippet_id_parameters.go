package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/netlify/swagger-api/models"
)

// NewPutSitesSiteIDSnippetsSnippetIDParams creates a new PutSitesSiteIDSnippetsSnippetIDParams object
// with the default values initialized.
func NewPutSitesSiteIDSnippetsSnippetIDParams() *PutSitesSiteIDSnippetsSnippetIDParams {
	var ()
	return &PutSitesSiteIDSnippetsSnippetIDParams{}
}

/*PutSitesSiteIDSnippetsSnippetIDParams contains all the parameters to send to the API endpoint
for the put sites site ID snippets snippet ID operation typically these are written to a http.Request
*/
type PutSitesSiteIDSnippetsSnippetIDParams struct {

	/*SiteID*/
	SiteID string
	/*Snippet*/
	Snippet models.Snippet
	/*SnippetID*/
	SnippetID string
}

// WithSiteID adds the siteId to the put sites site ID snippets snippet ID params
func (o *PutSitesSiteIDSnippetsSnippetIDParams) WithSiteID(SiteID string) *PutSitesSiteIDSnippetsSnippetIDParams {
	o.SiteID = SiteID
	return o
}

// WithSnippet adds the snippet to the put sites site ID snippets snippet ID params
func (o *PutSitesSiteIDSnippetsSnippetIDParams) WithSnippet(Snippet models.Snippet) *PutSitesSiteIDSnippetsSnippetIDParams {
	o.Snippet = Snippet
	return o
}

// WithSnippetID adds the snippetId to the put sites site ID snippets snippet ID params
func (o *PutSitesSiteIDSnippetsSnippetIDParams) WithSnippetID(SnippetID string) *PutSitesSiteIDSnippetsSnippetIDParams {
	o.SnippetID = SnippetID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *PutSitesSiteIDSnippetsSnippetIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Snippet); err != nil {
		return err
	}

	// path param snippet_id
	if err := r.SetPathParam("snippet_id", o.SnippetID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
