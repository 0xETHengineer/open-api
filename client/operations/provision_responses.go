package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/netlify/swagger-api/models"
)

// ProvisionReader is a Reader for the Provision structure.
type ProvisionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *ProvisionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewProvisionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewProvisionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewProvisionOK creates a ProvisionOK with default headers values
func NewProvisionOK() *ProvisionOK {
	return &ProvisionOK{}
}

/*ProvisionOK handles this case with default header values.

OK
*/
type ProvisionOK struct {
}

func (o *ProvisionOK) Error() string {
	return fmt.Sprintf("[POST /sites/{site_id}/ssl][%d] provisionOK ", 200)
}

func (o *ProvisionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProvisionDefault creates a ProvisionDefault with default headers values
func NewProvisionDefault(code int) *ProvisionDefault {
	return &ProvisionDefault{
		_statusCode: code,
	}
}

/*ProvisionDefault handles this case with default header values.

error
*/
type ProvisionDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the provision default response
func (o *ProvisionDefault) Code() int {
	return o._statusCode
}

func (o *ProvisionDefault) Error() string {
	return fmt.Sprintf("[POST /sites/{site_id}/ssl][%d] provision default  %+v", o._statusCode, o.Payload)
}

func (o *ProvisionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
