package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadDeployFileParams creates a new UploadDeployFileParams object
// with the default values initialized.
func NewUploadDeployFileParams() *UploadDeployFileParams {
	var ()
	return &UploadDeployFileParams{}
}

/*UploadDeployFileParams contains all the parameters to send to the API endpoint
for the upload deploy file operation typically these are written to a http.Request
*/
type UploadDeployFileParams struct {

	/*DeployID*/
	DeployID string
	/*FileBody*/
	FileBody io.ReadCloser
	/*FilePath*/
	FilePath string
	/*SiteID*/
	SiteID string
}

// WithDeployID adds the deployId to the upload deploy file params
func (o *UploadDeployFileParams) WithDeployID(DeployID string) *UploadDeployFileParams {
	o.DeployID = DeployID
	return o
}

// WithFileBody adds the fileBody to the upload deploy file params
func (o *UploadDeployFileParams) WithFileBody(FileBody io.ReadCloser) *UploadDeployFileParams {
	o.FileBody = FileBody
	return o
}

// WithFilePath adds the filePath to the upload deploy file params
func (o *UploadDeployFileParams) WithFilePath(FilePath string) *UploadDeployFileParams {
	o.FilePath = FilePath
	return o
}

// WithSiteID adds the siteId to the upload deploy file params
func (o *UploadDeployFileParams) WithSiteID(SiteID string) *UploadDeployFileParams {
	o.SiteID = SiteID
	return o
}

// WriteToRequest writes these params to a swagger request
func (o *UploadDeployFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	var res []error

	// path param deploy_id
	if err := r.SetPathParam("deploy_id", o.DeployID); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.FileBody); err != nil {
		return err
	}

	// path param file_path
	if err := r.SetPathParam("file_path", o.FilePath); err != nil {
		return err
	}

	// path param site_id
	if err := r.SetPathParam("site_id", o.SiteID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
