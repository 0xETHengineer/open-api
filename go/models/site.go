// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Site site
// swagger:model site

type Site struct {

	// account name
	AccountName string `json:"account_name,omitempty"`

	// account slug
	AccountSlug string `json:"account_slug,omitempty"`

	// admin url
	AdminURL string `json:"admin_url,omitempty"`

	// build settings
	BuildSettings *RepoInfo `json:"build_settings,omitempty"`

	// capabilities
	Capabilities map[string]interface{} `json:"capabilities,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// custom domain
	CustomDomain string `json:"custom_domain,omitempty"`

	// deploy hook
	DeployHook string `json:"deploy_hook,omitempty"`

	// deploy url
	DeployURL string `json:"deploy_url,omitempty"`

	// domain aliases
	DomainAliases []string `json:"domain_aliases"`

	// force ssl
	ForceSsl bool `json:"force_ssl,omitempty"`

	// git provider
	GitProvider string `json:"git_provider,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// managed dns
	ManagedDNS bool `json:"managed_dns,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notification email
	NotificationEmail string `json:"notification_email,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// plan
	Plan string `json:"plan,omitempty"`

	// processing settings
	ProcessingSettings *SiteProcessingSettings `json:"processing_settings,omitempty"`

	// published deploy
	PublishedDeploy *Deploy `json:"published_deploy,omitempty"`

	// screenshot url
	ScreenshotURL string `json:"screenshot_url,omitempty"`

	// session id
	SessionID string `json:"session_id,omitempty"`

	// ssl
	Ssl bool `json:"ssl,omitempty"`

	// ssl url
	SslURL string `json:"ssl_url,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`
}

/* polymorph site account_name false */

/* polymorph site account_slug false */

/* polymorph site admin_url false */

/* polymorph site build_settings false */

/* polymorph site capabilities false */

/* polymorph site created_at false */

/* polymorph site custom_domain false */

/* polymorph site deploy_hook false */

/* polymorph site deploy_url false */

/* polymorph site domain_aliases false */

/* polymorph site force_ssl false */

/* polymorph site git_provider false */

/* polymorph site id false */

/* polymorph site managed_dns false */

/* polymorph site name false */

/* polymorph site notification_email false */

/* polymorph site password false */

/* polymorph site plan false */

/* polymorph site processing_settings false */

/* polymorph site published_deploy false */

/* polymorph site screenshot_url false */

/* polymorph site session_id false */

/* polymorph site ssl false */

/* polymorph site ssl_url false */

/* polymorph site state false */

/* polymorph site updated_at false */

/* polymorph site url false */

/* polymorph site user_id false */

// Validate validates this site
func (m *Site) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDomainAliases(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProcessingSettings(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublishedDeploy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Site) validateBuildSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.BuildSettings) { // not required
		return nil
	}

	if m.BuildSettings != nil {

		if err := m.BuildSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build_settings")
			}
			return err
		}
	}

	return nil
}

func (m *Site) validateDomainAliases(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainAliases) { // not required
		return nil
	}

	return nil
}

func (m *Site) validateProcessingSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.ProcessingSettings) { // not required
		return nil
	}

	if m.ProcessingSettings != nil {

		if err := m.ProcessingSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processing_settings")
			}
			return err
		}
	}

	return nil
}

func (m *Site) validatePublishedDeploy(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishedDeploy) { // not required
		return nil
	}

	if m.PublishedDeploy != nil {

		if err := m.PublishedDeploy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("published_deploy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Site) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Site) UnmarshalBinary(b []byte) error {
	var res Site
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteProcessingSettings site processing settings
// swagger:model SiteProcessingSettings

type SiteProcessingSettings struct {

	// css
	CSS *MinifyOptions `json:"css,omitempty"`

	// html
	HTML *SiteProcessingSettingsHTML `json:"html,omitempty"`

	// images
	Images *SiteProcessingSettingsImages `json:"images,omitempty"`

	// js
	Js *MinifyOptions `json:"js,omitempty"`

	// skip
	Skip bool `json:"skip,omitempty"`
}

/* polymorph SiteProcessingSettings css false */

/* polymorph SiteProcessingSettings html false */

/* polymorph SiteProcessingSettings images false */

/* polymorph SiteProcessingSettings js false */

/* polymorph SiteProcessingSettings skip false */

// Validate validates this site processing settings
func (m *SiteProcessingSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCSS(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTML(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateJs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteProcessingSettings) validateCSS(formats strfmt.Registry) error {

	if swag.IsZero(m.CSS) { // not required
		return nil
	}

	if m.CSS != nil {

		if err := m.CSS.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processing_settings" + "." + "css")
			}
			return err
		}
	}

	return nil
}

func (m *SiteProcessingSettings) validateHTML(formats strfmt.Registry) error {

	if swag.IsZero(m.HTML) { // not required
		return nil
	}

	if m.HTML != nil {

		if err := m.HTML.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processing_settings" + "." + "html")
			}
			return err
		}
	}

	return nil
}

func (m *SiteProcessingSettings) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	if m.Images != nil {

		if err := m.Images.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processing_settings" + "." + "images")
			}
			return err
		}
	}

	return nil
}

func (m *SiteProcessingSettings) validateJs(formats strfmt.Registry) error {

	if swag.IsZero(m.Js) { // not required
		return nil
	}

	if m.Js != nil {

		if err := m.Js.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processing_settings" + "." + "js")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteProcessingSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteProcessingSettings) UnmarshalBinary(b []byte) error {
	var res SiteProcessingSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteProcessingSettingsHTML site processing settings HTML
// swagger:model SiteProcessingSettingsHTML

type SiteProcessingSettingsHTML struct {

	// pretty urls
	PrettyUrls bool `json:"pretty_urls,omitempty"`
}

/* polymorph SiteProcessingSettingsHTML pretty_urls false */

// Validate validates this site processing settings HTML
func (m *SiteProcessingSettingsHTML) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SiteProcessingSettingsHTML) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteProcessingSettingsHTML) UnmarshalBinary(b []byte) error {
	var res SiteProcessingSettingsHTML
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteProcessingSettingsImages site processing settings images
// swagger:model SiteProcessingSettingsImages

type SiteProcessingSettingsImages struct {

	// optimize
	Optimize bool `json:"optimize,omitempty"`
}

/* polymorph SiteProcessingSettingsImages optimize false */

// Validate validates this site processing settings images
func (m *SiteProcessingSettingsImages) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *SiteProcessingSettingsImages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteProcessingSettingsImages) UnmarshalBinary(b []byte) error {
	var res SiteProcessingSettingsImages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
